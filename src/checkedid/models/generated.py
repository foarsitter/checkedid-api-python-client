# generated by datamodel-codegen:
#   filename:  openapi.json
#   timestamp: 2022-12-21T13:46:22+00:00

from __future__ import annotations

from datetime import datetime
from typing import Any

from pydantic import BaseModel
from pydantic import Field


class Model(BaseModel):
    __root__: Any


class CreateInvitationRequest(BaseModel):
    EmployeeCode: int = Field(
        ..., description="EmployeeCode is integer as registered with CheckedID."
    )
    InviteeEmail: str = Field(
        ...,
        description="InviteeEmail is string used as unique identifier for Invitations.",
    )
    InviteeFirstName: str = Field(
        ...,
        description="InviteeFirstName is string to be used for personally addressing the invitee.",
    )
    InviteeLastName: str | None = Field(
        None,
        description="InviteeLastName is string to be used for personally addressing the invitee.",
    )
    CustomerReference: str | None = Field(
        None,
        description="CustomerReference is string to be used by customers "
        "for identifying this Invitation in their own environment.",
    )
    AppFlow: str = Field(
        ..., description="AppFlow is string with possible values 10 to 29"
    )
    Validity: int = Field(
        ...,
        description="Validity is integer indicating the number"
        " of hours the Invitation is valid after being generated.",
    )
    PreferredLanguage: str | None = Field(
        None,
        description='PreferredLanguage is string with possible values "nl",'
        ' "en", "fr", "de" (Used in sending invitation through email)',
    )


class Invitation(BaseModel):
    EmployeeCode: int = Field(..., description="Employee Code")
    InviteeEmail: str = Field(..., description="Invitee Email")
    InvitationCode: str | None = Field(None, description="Invitation Code")
    InviteeFirstName: str = Field(..., description="First Name")
    InviteeLastName: str | None = Field(
        None,
        description="InviteeLastName is string to be used for personally addressing the invitee.",
    )
    CustomerReference: str | None = Field(None, description="Customer Reference")
    AppFlow: str = Field(..., description="App Flow")
    Validity: int = Field(..., description="Validity")
    InvitedTime: str | None = Field(None, description="Invitation Date Time")
    PreferredLanguage: str | None = Field(None, description="Preferred Language")


class UpdateInvitationRequest(BaseModel):
    InvitationCode: str | None = Field(None, description="Invitation Code")
    InviteeFirstName: str = Field(
        ...,
        description="InviteeFirstName is string to be used for personally addressing the invitee.",
    )
    InviteeLastName: str | None = Field(
        None,
        description="InviteeLastName is string to be used for personally addressing the invitee.",
    )
    CustomerReference: str | None = Field(
        None,
        description="CustomerReference is string to be used by customers for"
        " identifying this Invitation in their own environment.",
    )
    AppFlow: str = Field(
        ..., description="AppFlow is string with possible values 10 to 29"
    )
    Validity: int = Field(
        ...,
        description="Validity is integer indicating the number of hours the"
        " Invitation is valid after being generated.",
    )
    PreferredLanguage: str | None = Field(
        None,
        description='PreferredLanguage is string with possible values "nl", "en",'
        ' "fr", "de" (Used in sending invitation through email)',
    )


class CreateUserRequest(BaseModel):
    UserCode: int | None = Field(None, description="UserCode is integer")
    FirstName: str | None = Field(
        None,
        description="FirstName is string to be used for personally addressing the user.",
    )
    LastName: str | None = Field(
        None,
        description="LastName is string to be used for personally addressing the user.",
    )
    Role: str | None = Field(None, description="Role of the user (Admin/Basic/AppOnly)")
    Email: str | None = Field(
        None, description="Email is string used as unique identifier for users."
    )
    Password: str | None = Field(None, description="Password")
    StartDate: datetime | None = Field(None, description="Start Date of the user")
    EndDate: datetime | None = Field(None, description="End Date of the user")
    HolderConfirmationBy: str | None = Field(
        None, description="Holder Confirmation By (App user/CheckedID Auto)"
    )
    UserType: str | None = Field(None, description="User type (Internal/External)")
    UserReference: str | None = Field(None, description="User reference")
    ReportEmailAddress: str | None = Field(
        None, description="Alternative email address for reports"
    )
    NotificationEmailAddress: str | None = Field(
        None, description="Nomination email address"
    )


class CreateUserResponse(BaseModel):
    UserCode: int | None = Field(None, description="User Code")
    FirstName: str | None = Field(
        None,
        description="FirstName is string to be used for personally addressing the user.",
    )
    LastName: str | None = Field(
        None,
        description="LastName is string to be used for personally addressing the user.",
    )
    Role: str | None = Field(None, description="Role of the user (Admin/Basic/AppOnly)")
    Email: str | None = Field(
        None, description="Email is string used as unique identifier for users."
    )
    ActivationCode: str | None = Field(
        None, description="Code generated by CheckedID for activation"
    )
    StartDate: datetime | None = Field(None, description="Start Date of the user")
    EndDate: datetime | None = Field(None, description="End Date of the user")
    HolderConfirmationBy: str | None = Field(
        None, description="Holder Confirmation By (App user/CheckedID Auto)"
    )
    UserType: str | None = Field(None, description="User type (Internal/External)")
    UserReference: str | None = Field(None, description="User reference")
    ReportEmailAddress: str | None = Field(
        None, description="Alternative email address for reports"
    )
    NotificationEmailAddress: str | None = Field(
        None, description="Nomination email address"
    )


class UserRequest(BaseModel):
    UserCode: int | None = Field(None, description="UserCode is integer")
    FirstName: str | None = Field(
        None,
        description="FirstName is string to be used for personally addressing the user.",
    )
    LastName: str | None = Field(
        None,
        description="LastName is string to be used for personally addressing the user.",
    )
    Role: str | None = Field(None, description="Role of the user (Admin/Basic/AppOnly)")
    Email: str | None = Field(
        None, description="Email is string used as unique identifier for users."
    )
    Password: str | None = Field(None, description="Password")
    StartDate: datetime | None = Field(None, description="Start Date of the user")
    EndDate: datetime | None = Field(None, description="End Date of the user")
    HolderConfirmationBy: str | None = Field(
        None, description="Holder Confirmation By (App user/CheckedID Auto)"
    )
    UserType: str | None = Field(None, description="User type (Internal/External)")
    UserReference: str | None = Field(None, description="User reference")
    ReportEmailAddress: str | None = Field(
        None, description="Alternative email address for reports"
    )
    NotificationEmailAddress: str | None = Field(
        None, description="Notification email address"
    )


class UpdateUserResponse(BaseModel):
    UserCode: int | None = Field(None, description="User Code")
    FirstName: str | None = Field(
        None,
        description="FirstName is string to be used for personally addressing the user.",
    )
    LastName: str | None = Field(
        None,
        description="LastName is string to be used for personally addressing the user.",
    )
    Role: str | None = Field(None, description="Role of the user (Admin/Basic/AppOnly)")
    Email: str | None = Field(
        None, description="Email is string used as unique identifier for users."
    )
    ActivationCode: str | None = Field(
        None, description="Code generated by CheckedID for activation"
    )
    StartDate: datetime | None = Field(None, description="Start Date of the user")
    EndDate: datetime | None = Field(None, description="End Date of the user")
    HolderConfirmationBy: str | None = Field(
        None, description="Holder Confirmation By (App user/CheckedID Auto)"
    )
    UserType: str | None = Field(None, description="User type (Internal/External)")
    UserReference: str | None = Field(None, description="User reference")
    ReportEmailAddress: str | None = Field(
        None, description="Alternative email address for reports"
    )
    NotificationEmailAddress: str | None = Field(
        None, description="Notification email address"
    )


class ActivateUserRequest(BaseModel):
    UserCode: int | None = Field(None, description="UserCode is integer")


class ActivateUserResponse(BaseModel):
    UserCode: int | None = Field(None, description="UserCode is integer")
    ActivationCode: str | None = Field(None, description="Generated activation code")


class ReportResponse(BaseModel):
    DossierNumber: str | None = Field(None, description="Dossier Number")
    ReportPDF: str | None = Field(None, description="Report PDF")


class ReportDataV3(BaseModel):
    CustomerCode: str | None = Field(None, description="Customer Code")
    CustomerName: str | None = Field(None, description="Customer name")
    DossierNumber: str | None = Field(None, description="Dossier number of the report")
    EmployeeCode: str | None = Field(None, description="Employee Code")
    EmployeeInvolved: str | None = Field(None, description="Employee Involved")
    ReportDateTime: str | None = Field(None, description="Report Date Time")
    ExecutedBy: str | None = Field(None, description="Executed By")
    ReportResult: str | None = Field(None, description="Result")
    Details: str | None = Field(None, description="Details")
    DetailsMessageCode: str | None = Field(None, description="Details Message Code")
    DocumentType: str | None = Field(None, description="Document Type")
    DocumentTypeCode: str | None = Field(None, description="Document Code")
    DocumentCountry: str | None = Field(None, description="Document Country")
    DocumentNumber: str | None = Field(None, description="Document Number")
    DateOfIssue: str | None = Field(None, description="Date of Issue")
    DateOfExpiry: str | None = Field(None, description="Date of Expiry")
    Authority: str | None = Field(None, description="Authority")
    FirstName: str | None = Field(None, description="First Name")
    Name: str | None = Field(None, description="Name")
    Sex: str | None = Field(None, description="Sex")
    DateOfBirth: str | None = Field(None, description="Date of Birth")
    PlaceOfBirth: str | None = Field(None, description="Place of Birth")
    PersonalNumber: str | None = Field(None, description="Personal Number")
    Nationality: str | None = Field(None, description="Nationality")
    PhotoIdChip: list[str] | None = Field(None, description="Photo Id Chip")
    PhotoHolder: list[str] | None = Field(None, description="Photo Holder")
    IdDocumentFront: list[str] | None = Field(None, description="Front Document")
    IdDocumentBack: list[str] | None = Field(None, description="Back Document")
    OtherDocument: list[str] | None = Field(None, description="Other document")
    SignatureFromIDDocument: str | None = Field(
        None, description="Signature from ID Document"
    )


class ResultCallbackStatus(BaseModel):
    CustomerCode: int | None = Field(None, description="Customer Code")
    EmployeeCode: int | None = Field(None, description="Employee Code")
    InviteeEmail: str | None = Field(None, description="Invitee Email")
    CustomerReference: str | None = Field(None, description="Customer Reference")
    InvitationCode: str | None = Field(None, description="Invitation Code")
    DossierNumber: str | None = Field(None, description="Dossier Number")
    ReportDateTime: str | None = Field(None, description="Report Date Time")
    ReportResult: str | None = Field(None, description="Result")
    Details: str | None = Field(None, description="Details")
    DetailsMessageCode: str | None = Field(None, description="Message Codes")
    Status: str | None = Field(None, description="Status")


class CreateInvitationDetails(BaseModel):
    CustomerCode: int = Field(
        ..., description="CustomerCode is integer as registered with CheckedID."
    )
    Invitations: list[CreateInvitationRequest] = Field(
        ..., description="List of Invitations"
    )


class CustomerDetails(BaseModel):
    CustomerCode: int = Field(..., description="Customer Code")
    Invitations: list[Invitation] = Field(..., description="List of Invitations")


class UpdateInvitationDetails(BaseModel):
    CustomerCode: int = Field(
        ..., description="CustomerCode is integer as registered with CheckedID."
    )
    Invitations: list[UpdateInvitationRequest] = Field(
        ..., description="List of Invitations"
    )


class CreateUserDetails(BaseModel):
    CustomerCode: int = Field(
        ..., description="CustomerCode is integer as registered with CheckedID."
    )
    Users: list[CreateUserRequest] = Field(..., description="List of Users")


class CreateUserDetailsResponse(BaseModel):
    CustomerCode: int = Field(
        ..., description="CustomerCode is integer as registered with CheckedID."
    )
    Users: list[CreateUserResponse] = Field(..., description="List of users")


class UpdateUserDetails(BaseModel):
    CustomerCode: int = Field(
        ..., description="CustomerCode is integer as registered with CheckedID."
    )
    Users: list[UserRequest] = Field(..., description="List of Users")


class UpdateUserDetailsResponse(BaseModel):
    CustomerCode: int = Field(
        ..., description="CustomerCode is integer as registered with CheckedID."
    )
    Users: list[UpdateUserResponse] = Field(..., description="List of users")


class ActivateUsers(BaseModel):
    CustomerCode: int = Field(
        ..., description="CustomerCode is integer as registered with CheckedID."
    )
    Users: list[ActivateUserRequest] = Field(..., description="List of Users")


class ActivateUsersResponse(BaseModel):
    CustomerCode: int = Field(
        ..., description="CustomerCode is integer as registered with CheckedID."
    )
    Users: list[ActivateUserResponse] = Field(..., description="List of Users")
